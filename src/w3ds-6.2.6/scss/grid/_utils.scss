@import '../_variables';

// All inline-block rows contain:
@mixin row-base {
  font-size: 0;

  &::after {
    content: '';
    display: inline-block;
    width: 100%;
  }

  &>* {
    font-size: $font-size-px;
    font-size: $font-size; // sass-lint:disable-line no-duplicate-properties
  }
}

// All columns contain:
@mixin column-base {
  display: inline-block;
  position: relative;
  vertical-align: top;
  width: 100%;
}

// Defines default and responsive gutters for columns
@mixin gutters($gutter) {
  padding-left: floor($gutter / 2);
  padding-right: ceil($gutter / 2);
}

// Creates basic columns based on col-[number]
@mixin columns($total-columns, $gutter-width, $breakpoint-names, $full-width-breakpoint) {

  %column {
    @include column-base;
  }

  %gutters {
    @include gutters($gutter-width);
  }

  @for $var from 0 through $total-columns {

    .#{$framework-class-prefix}-col-#{$var} {
      @extend %column;
      @extend %gutters;
    }

    @each $breakpoint in $breakpoint-names {
      .#{$framework-class-prefix}-col-#{$breakpoint}-#{$var} {
        @extend %column;
        @extend %gutters;
      }
    }
  }

  @include breakpoint-min($full-width-breakpoint) {

    .#{$framework-class-prefix}-no-gutter {
      padding-left: 0;
      padding-right: 0;

      &>.#{$framework-class-prefix}-row {
        margin-left: 0;
        margin-right: 0;
      }
    }

    @for $var from 0 through $total-columns {
      .#{$framework-class-prefix}-col-#{$var} {
        width: percentage($var / $total-columns);
      }

      @include column-helpers($var, $total-columns);
    }
  }
}

// Creates columns for a particular breakpoint.
@mixin responsive-columns($total-columns, $breakpoint-name, $gutter-width) {

  @include breakpoint($breakpoint-name) {

    .#{$framework-class-prefix}-no-gutter-#{$breakpoint-name} {
      padding-left: 0;
      padding-right: 0;

      &>.#{$framework-class-prefix}-row {
        margin-left: 0;
        margin-right: 0;
      }
    }

    @for $var from 0 through $total-columns {

      .#{$framework-class-prefix}-col-#{$breakpoint-name}-#{$var} {
        width: percentage($var / $total-columns);
      }

      @include column-helpers($var, $total-columns, $breakpoint-name);
    }
  }
}

// Offsets columns from the left, or from the preceding column,
// by the specified number of columns.
@mixin offset($col-num, $total-columns, $breakpoint-name: '') {
  @if ($breakpoint-name !='') {
    .#{$framework-class-prefix}-offset-#{$breakpoint-name}-#{$col-num} {
      margin-left: percentage($col-num / $total-columns);
    }
  }

  @else {
    .#{$framework-class-prefix}-offset-#{$col-num} {
      margin-left: percentage($col-num / $total-columns);
    }
  }
}

// Pushes a column to the right of where it should be.
// Used for modifying visual order despite order in markup.
@mixin push($col-num, $total-columns, $breakpoint-name: '') {
  @if ($breakpoint-name !='') {
    .#{$framework-class-prefix}-push-#{$breakpoint-name}-#{$col-num} {
      left: percentage($col-num / $total-columns);
      right: auto;
    }
  }

  @else {
    .#{$framework-class-prefix}-push-#{$col-num} {
      left: percentage($col-num / $total-columns);
      right: auto;
    }
  }
}

// Pulls a column to the left of where it should be.
// Used for modifying visual order despite order in markup
@mixin pull($col-num, $total-columns, $breakpoint-name: '') {

  @if ($breakpoint-name !='') {
    .#{$framework-class-prefix}-pull-#{$breakpoint-name}-#{$col-num} {
      left: auto;
      right: percentage($col-num / $total-columns);
    }
  }

  @else {
    .#{$framework-class-prefix}-pull-#{$col-num} {
      left: auto;
      right: percentage($col-num / $total-columns);
    }
  }
}

// Creates offset, push, and pull for a column width
@mixin column-helpers($col-num, $total-columns, $breakpoint-name: '') {
  @include offset($col-num, $total-columns, $breakpoint-name);
  @include push($col-num, $total-columns, $breakpoint-name);
  @include pull($col-num, $total-columns, $breakpoint-name);
}

// Creates a row with negative margins equal to gutter
@mixin row($gutter) {
  @if (unit($gutter)=='em') {
    $gutter: ($gutter / 1em) * $font-size-px;
  }

  @include row-base;
  margin-left: ceil($gutter / -2);
  margin-right: floor($gutter / -2);
}

// Sets grid padding
@mixin grid($gutter) {
  padding-left: floor($gutter / 2);
  padding-right: ceil($gutter / 2);
}

// Produces a grid with x columns, y gutter width, and x column classes prefixed with z column class
@mixin full-grid($total-columns: 12, $gutter-width: $font-size-px, $full-width-breakpoint: '') {

  @if (unit($gutter-width)=='em') {
    $gutter-width: em-to-px($gutter-width);
  }

  .#{$framework-class-prefix}-grid {
    @include grid($gutter-width);
  }

  .#{$framework-class-prefix}-row {
    @include row($gutter-width);
  }

  @if ($full-width-breakpoint=='') {
    $full-width-breakpoint: 'md';
  }

  $breakpoint-names: $breakpoints;
  // create columns amounting to total-columns with class 'column-class + number'
  @include columns($total-columns, $gutter-width, $breakpoint-names, $full-width-breakpoint);

  @include responsive-columns($total-columns, 'xs', $gutter-width);
  @include responsive-columns($total-columns, 'sm', $gutter-width);
  @include responsive-columns($total-columns, 'md', $gutter-width);
  @include responsive-columns($total-columns, 'lg', $gutter-width);
  @include responsive-columns($total-columns, 'xl', $gutter-width);
}